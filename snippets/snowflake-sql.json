{
	"type": {
		"prefix": "type",
		"body": [
			"${1|NUMBER(38\\, 0),VARCHAR(16777216),BOOLEAN,DATE,DATETIME,TIME|}"
		]
	},
	// shortcut
	"SELECT": {
		"prefix": ["SELECT", "sel", "sl"],
		"body": [
			"SELECT * FROM $0;"
		]
	},
	"FROM": {
		"prefix": ["FROM", "from", "fm"],
		"body": [
			"FROM "
		]
	},
	"WHERE": {
		"prefix": ["WHERE", "whe", "wh"],
		"body": [
			"WHERE "
		]
	},
	"OR": {
		"prefix": ["OR", "or"],
		"body": [
			"OR "
		]
	},
	"AND": {
		"prefix": ["AND", "and", "an"],
		"body": [
			"AND "
		]
	},
	"ORDER BY": {
		"prefix": ["ORDER BY", "ord", "od"],
		"body": [
			"ORDER BY "
		]
	},
	"GROUP BY": {
		"prefix": ["GROUP BY", "gp"],
		"body": [
			"GROUP BY ALL"
		]
	},
	"LIMIT": {
		"prefix": ["LIMIT", "lim", "lm"],
		"body": [
			"LIMIT 10;"
		]
	},
	"IN": {
		"prefix": ["IN", "in"],
		"body": [
			"IN ($0)"
		]
	},
	"BETWEEN": {
		"prefix": ["BETWEEN", "bet"],
		"body": [
			"BETWEEN $0 AND $1"
		]
	},
	"LIKE": {
		"prefix": ["LIKE", "like"],
		"body": [
			"LIKE \"%\""
		]
	},
	"ILIKE": {
		"prefix": ["ILIKE", "ilike"],
		"body": [
			"LIKE \"%\""
		]
	},
	"DISTINCT": {
		"prefix": ["DISTINCT", "dist"],
		"body": [
			"DISTINCT "
		]
	},
	"COUNT": {
		"prefix": ["COUNT", "cnt"],
		"body": [
			"COUNT(${0:*})"
		]
	},
	"MAX": {
		"prefix": ["MAX", "max"],
		"body": [
			"MAX($0)"
		]
	},
	"MIN": {
		"prefix": ["MIN", "min"],
		"body": [
			"MIN($0)"
		]
	},
	"SUM": {
		"prefix": ["SUM", "sum"],
		"body": [
			"SUM($0)"
		]
	},
	"MEDIAN": {
		"prefix": ["MEDIAN", "med"],
		"body": [
			"MEDIAN($0)"
		]
	},
	"MODE": {
		"prefix": ["MODE", "mod"],
		"body": [
			"MODE($0)"
		]
	},
	"AVERAGE": {
		"prefix": ["AVG", "ave"],
		"body": [
			"AVG($0)"
		]
	},
	"GREATEST": {
		"prefix": ["GREATEST", "great", "gre"],
		"body": [
			"GREATEST($0, 0)"
		]
	},
	"DIV0NULL": {
		"prefix": ["DIV0NULL", "div"],
		"body": [
			"DIV0NULL($0)"
		]
	},
	"COALESCE": {
		"prefix": ["COALESCE", "coal"],
		"body": [
			"COALESCE($0, 0)"
		]
	},
	"WITH": {
		"prefix": ["WITH", "wi"],
		"body": [
			"WITH",
			"${1:tmp} AS ("
		]
	},
	"IFF": {
		"prefix": ["IFF", "if"],
		"body": [
			"IFF(${1:<cond>}, 1, 0) AS $0"
		]
	},
	"CASE": {
		"prefix": ["CASE", "ca"],
		"body": [
			"CASE WHEN ${1:<cond>} THEN 1 ELSE 0 END AS $0"
		]
	},
	"INNER JOIN": {
		"prefix": ["INNER JOIN", "inner"],
		"body": [
			"INNER JOIN",
			"\t$0",
			"ON"
		]
	},
	"LEFT JOIN": {
		"prefix": ["LEFT JOIN", "left"],
		"body": [
			"LEFT JOIN",
			"\t$0",
			"ON"
		]
	},
	"OUTER JOIN": {
		"prefix": ["OUTER JOIN", "outer"],
		"body": [
			"FULL OUTER JOIN",
			"\t$0",
			"ON"
		]
	},
	// value
	"first_date": {
		"prefix": "first_date",
		"body": [
			"DATE_TRUNC('month', ${1:<date>})"
		]
	},
	"last_date": {
		"prefix": "last_date",
		"body": [
			"LAST_DAY(${1:<date>})"
		]
	},
	"today": {
		"prefix": "today",
		"body": [
			"CURRENT_DATE()"
		]
	},
	"yesterday": {
		"prefix": "yesterday",
		"body": [
			"DATEADD('day', -1, CURRENT_DATE())"
		]
	},
	"tomorrow": {
		"prefix": "tomorrow",
		"body": [
			"DATEADD('day', 1, CURRENT_DATE())"
		]
	},
	"yearmonth": {
		"prefix": "yearmonth",
		"body": [
			"TO_VARCHAR(${1:<date>}, 'YYYYMM')"
		]
	},
	// template
	"LEFT JOIN(not null)": {
		"prefix": "LEFT JOIN(not null)",
		"body": [
			"LEFT JOIN",
			"\t${2:<right>}",
			"ON",
			"\t${1:<left>}.${3:<key>} = ${2:<right>}.${3:<key>}",
			"WHERE",
			"\t${2:<right>}.${3:<key>} IS NOT NULL"
		]
	},
	"pivot": {
		"prefix": "pivot",
		"body": [
			"PIVOT (",
			"\t${1:SUM(<value>)}",
			"\tFOR",
			"\t\t${2:<key>}",
			"\tIN",
			"\t\t(SELECT DISTINCT ${2:<key>} FROM ${3:<table>})",
			")"
		]
	},
	"clone table": {
		"prefix": ["clone", "clone_table"],
		"body": [
			"CREATE OR REPLACE TABLE ${1:<dst>} CLONE ${2:<src>};"
		]
	},
	"clone view": {
		"prefix": ["clonev", "clone_view"],
		"body": [
			"CREATE OR REPLACE TABLE ${1:<dst>} AS SELECT * FROM ${2:<src>};"
		]
	},
	"clone header": {
		"prefix": ["cloneh", "clone_header"],
		"body": [
			"CREATE OR REPLACE TABLE ${1:<dst>} AS SELECT * FROM ${2:<src>} WHERE 1<>1;"
		]
	},
	"insert": {
		"prefix": "insert",
		"body": [
			"INSERT INTO ${1:<table>}",
			"\t(${2:<KEYS>})",
			"VALUES",
			"\t(${3:<VALUES>})",
			";"
		]
	},
	"update": {
		"prefix": "update",
		"body": [
			"UPDATE ${1:<table>}",
			"SET",
			"\t${2:<key>} = ${3:<value>}",
			"WHERE",
			"\t<CONDITION>;"
		]
	},
	"random(uniform)": {
		"prefix": "uniform",
		"body": [
			"UNIFORM(${1:<min>}, ${2:<max>}, RANDOM())"
		]
	},
	"sequence": {
		"prefix": "seq",
		"body": [
			"SELECT",
			"\tROW_NUMBER() OVER (ORDER BY SEQ4())",
			"FROM",
			"\tTABLE(GENERATOR(ROWCOUNT=>${1:10}))"
		]
	},
	"generator": {
		"prefix": "generator",
		"body": [
			"TABLE(GENERATOR(ROWCOUNT=>${1:10}))"
		]
	},
	"hash": {
		"prefix": "hash",
		"body": [
			"HASH_AGG(*)"
		]
	},
	"add_column": {
		"prefix": "add_column",
		"body": [
			"ALTER TABLE ${1:<table>} ADD COLUMN ${2:<key>} ${3:<type>};"
		]
	},
	"alter_column(not null)": {
		"prefix": "alter_col(not null)",
		"body": [
			"ALTER TABLE ${1:<table>} MODIFY COLUMN ${2:<key>} SET NOT NULL;"
		]
	},
	"alter_column(unique)": {
		"prefix": "alter_col(unique)",
		"body": [
			"ALTER TABLE ${1:<table>} ADD CONSTRAINT ${1:<constraint_name>} UNIQUE (${2:<key>});"
		]
	},
	"alter_column(primary_key)": {
		"prefix": "alter_col(primary_key)",
		"body": [
			"ALTER TABLE ${1:<table>} ADD CONSTRAINT ${1:<constraint_name>} PRIMARY KEY (${2:<key>});"
		]
	},
	"extract_by_group": {
		"prefix": ["extract_by_group", "qualify"],
		"body": [
			"QUALIFY",
			"\tROW_NUMBER() OVER (PARTITION BY ${1:<key>} ORDER BY ${2:<index>} DESC) = 1"
		]
	},
	"comment(table)": {
		"prefix": "comment(table)",
		"body": [
			"COMMENT ON TABLE ${1:<table>} IS ${2:<comment>};"
		]
	},
	"comment(column)": {
		"prefix": "comment(column)",
		"body": [
			"ALTER TABLE ${1:<table>} ALTER (",
			"\t${2:<key>} COMMENT ${3:<comment>}",
			");"
		]
	},
	// external table
	"create_external_stage": {
		"prefix": "create_external_stage",
		"body": [
			"CREATE STAGE ${1:<stage_name>}",
			"\tURL = '${2:<url>}'",
			"\tSTORAGE_INTEGRATION = ${3:<integration_name>};"
		]
	},
	"create_external_stage(s3)": {
		"prefix": "create_external_stage(s3)",
		"body": [
			"CREATE STAGE ${1:<stage_name>}",
			"\tURL = 'S3://${2:<bucket>}/${3:<prefix>}'",
			"\tSTORAGE_INTEGRATION = ${4:<integration_name>};"
		]
	},
	"create_external_table": {
		"prefix": "create_external_table",
		"body": [
			"CREATE OR REPLACE EXTERNAL TABLE ${1:<table>} (",
			"\tDATE_PART DATE AS (TO_DATE(METADATA\\$FILENAME)) NOT NULL",
			"\t, FILENAME VARCHAR AS (METADATA\\$FILENAME) NOT NULL",
			"\t, ${2:<key>} VARCHAR AS (VALUE:c1::VARCHAR) NULL",
			"\t, CONSTRAINT PK_${3:<table>} PRIMARY KEY (DATE_PART, ${4:<key>})",
			")",
			"PARTITION BY (DATE_PART)",
			"LOCATION=@${5:<external_stage>}",
			"AUTO_REFRESH=FALSE",
			"FILE_FORMAT=(TYPE=CSV FIELD_DELIMITER=',' SKIP_HEADER=1 COMPRESSION=GZIP)",
			"PATTERN = '.*.czv.gz'",
			";"
		]
	},
	"parse_date_from_filename": {
		"prefix": "parse_date_from_filename",
		"body": [
			"TO_DATE(SUBSTRING(SPLIT_PART(METADATA\\$FILENAME, '_', -1), 1, 8), 'YYYYMMDD')"
		]
	},
	"get_value_from_external_table": {
		"prefix": "get_value_from_external_table",
		"body": [
			"CAST(GET(VALUE, '${1:c1}') AS VARCHAR(16777216)) NOT NULL"
		]
	},
	// template
	"colnames": {
		"prefix": "get_colnames",
		"body": [
			"SELECT",
			"\t*",
			"FROM",
			"\t${1:<db_name>}.INFORMATION_SCHEMA.COLUMNS",
			"WHERE",
			"\tTABLE_CATALOG = '${1:<db_name>}'",
			"\tAND TABLE_SCHEMA = '${2:<schema_name>}'",
			"\tAND TABLE_NAME = '${3:<table_name>}';"
		]
	},
	"object_dependencies": {
		"prefix": ["dependency", "object_dependencies"],
		"body": [
			"SELECT",
			"\tREFERENCED_DATABASE,",
			"\tREFERENCED_SCHEMA,",
			"\tREFERENCED_OBJECT_NAME,",
			"\tREFERENCED_OBJECT_DOMAIN,",
			"\tREFERENCING_DATABASE,",
			"\tREFERENCING_SCHEMA,",
			"\tREFERENCING_OBJECT_NAME,",
			"\tREFERENCING_OBJECT_DOMAIN",
			"FROM",
			"\tSNOWFLAKE.ACCOUNT_USAGE.OBJECT_DEPENDENCIES",
			"WHERE",
			"\tREFERENCING_DATABASE = '${1:<db_name>}'",
			"\tAND REFERENCING_SCHEMA = '${2:<schema_name>}'",
			"\tAND REFERENCING_OBJECT_NAME = '${3:<table_name>}';"
		]
	},
	"tables_are_equal": {
		"prefix": ["diff", "equal"],
		"body": [
			"WITH",
			"ref AS (SELECT ${1:<cols>} FROM ${2:<ref>}),",
			"tgt AS (SELECT ${1:<cols>} FROM ${3:<tgt>}),",
			"ref_only AS (SELECT * FROM ref EXCEPT SELECT * FROM tgt),",
			"tgt_only AS (SELECT * FROM tgt EXCEPT SELECT * FROM ref),",
			"diff AS (",
			"\tSELECT 'REF' AS ref_or_tgt, * FROM ref_only",
			"\tUNION",
			"\tSELECT 'TGT' AS ref_or_tgt, * FROM tgt_only",
			")",
			"SELECT * FROM diff ORDER BY ${1:<cols>}, ref_or_tgt;"
		]
	},
	"tables_are_equal(hashagg)": {
		"prefix": ["diff(hashagg)", "equal(hashagg)"],
		"body": [
			"WITH",
			"ref AS (SELECT HASH_AGG(*) FROM ${1:<ref>}),",
			"tgt AS (SELECT HASH_AGG(*) FROM ${2:<tgt>}),",
			"diff AS (SELECT * FROM ref EXCEPT SELECT * FROM tgt)",
			"SELECT * FROM diff;"
		]
	},

	// debug
	"sample": {
		"prefix": ["sel*"],
		"body": [
			"SELECT * FROM $0 LIMIT 10;"
		]
	},
	"count records": {
		"prefix": ["cnt*"],
		"body": [
			"SELECT COUNT(*) FROM $0;"
		]
	},
	"show users": {
		"prefix": ["show_users", "su", "showu"],
		"body": [
			"SHOW USERS;"
		]
	},
	"show roles": {
		"prefix": ["show_roles", "sr", "showr"],
		"body": [
			"SHOW ROLES;"
		]
	},
	"show grants on": {
		"prefix": ["show_grants_on", "sgo", "showgo"],
		"description": "Objectに対して誰が何の権限を有するかを表示する",
		"body": [
			"SHOW GRANTS ON ${1|SCHEMA,TABLE,ROLE|} ${2:<OBJECT>};"
		]
	},
	"show grants to": {
		"prefix": ["show_grants_to", "sgt", "showgt"],
		"description": "ROLE/USERがどこに何の権限を有するかを表示する",
		"body": [
			"SHOW GRANTS TO ${1|ROLE,USER|} ${2:<NAME>};"
		]
	},
	"show columns": {
		"prefix": ["show_columns", "sc", "showc"],
		"body": [
			"SHOW COLUMNS IN ${1:<table>};"
		]
	},
	"describe_table": {
		"prefix": ["describe_table", "dt", "desct"],
		"body": [
			"DESCRIBE TABLE ${1:<table>};"
		]
	},
	"describe_view": {
		"prefix": ["describe_view", "dv", "descv"],
		"body": [
			"DESCRIBE VIEW ${1:<VIEW>};"
		]
	},
	"describe_user": {
		"prefix": ["describe_user", "du", "descu"],
		"body": [
			"DESCRIBE USER ${1:<USER>};"
		]
	},
	"describe_role": {
		"prefix": ["describe_role", "dr", "descr"],
		"body": [
			"DESCRIBE ROLE ${1:<ROLE>};"
		]
	},
	"duplicated": {
		"prefix": ["count_unique", "unique", "duplicated"],
		"body": [
			"SELECT ${2:<value>}, COUNT(*) FROM ${1:<table>} GROUP BY ALL ORDER BY COUNT(*) DESC;"
		]
	},
	"get_ddl": {
		"prefix": ["get_ddl", "ddl"],
		"body": [
			"SELECT GET_DDL('table', '${1:<table>}');"
		]
	},
	// system
	"query_history": {
		"prefix": ["query_history", "hist"],
		"body": [
			"SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY ORDER BY START_TIME;"
		]
	},
	"query_history(aggregate)": {
		"prefix": "query_history(aggregate)",
		"body": [
			"SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.AGGREGATE_QUERY_HISTORY ORDER BY INTERVAL_START_TIME DESC;"
		]
	},
	"last_query_id": {
		"prefix": "last_query_id",
		"body": [
			"SELECT LAST_QUERY_ID();"
		]
	},
	"current_session": {
		"prefix": "current_session",
		"body": [
			"SELECT CURRENT_SESSION();"
		]
	},
	"cancel_last_query": {
		"prefix": "cancel_last_query",
		"body": [
			"SELECT SYSTEM\\$CANCEL_QUERY(LAST_QUERY_ID());"
		]
	},
	"cancel_current_queries": {
		"prefix": "cancel_current_queries",
		"body": [
			"SELECT SYSTEM\\$CANCEL_ALL_QUERIES(CURRENT_SESSION());"
		]
	},
	"cancel_query": {
		"prefix": "cancel_query",
		"body": [
			"SELECT SYSTEM\\$CANCEL_QUERY(${1:<QUERY_ID>});"
		]
	},
	"cancel_all_queries": {
		"prefix": "cancel_all_queries",
		"body": [
			"SELECT SYSTEM\\$CANCEL_ALL_QUERIES(${1:<SESSION_ID>});"
		]
	}
}
