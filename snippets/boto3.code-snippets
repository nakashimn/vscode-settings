{
	"AWS_S3Client": {
		"scope": "python",
		"prefix": "aws_s3client",
		"body": [
			"class AwsS3Client:",
			"\tdef __init__(self, profile_name: str = \"default\") -> None:",
			"\t\tself.session: Session = Session(profile_name=profile_name)",
			"\t\tself.s3_client: S3Client = self.session.client(\"s3\")",
			"",
			"\tdef list_buckets(self) -> dict[str, Any]:",
			"\t\treturn self.s3_client.list_buckets()",
			"",
			"\tdef list_objects(",
			"\t\t\tself,",
			"\t\t\tbucket: str,",
			"\t\t\tprefix: str,",
			"\t\t\tdelimiter: str = \"\"",
			"\t) -> list[str]:",
			"\t\tobj = self.s3_client.list_objects_v2(",
			"\t\t\tBucket=bucket, Prefix=prefix, Delimiter=delimiter",
			"\t\t)",
			"\t\tif \"Contents\" not in obj.keys():",
			"\t\t\treturn []",
			"\t\treturn [c[\"Key\"] for c in obj[\"Contents\"]]",
			"",
			"\tdef read_csv_from_s3(self, bucket: str, key: str) -> pd.DataFrame:",
			"\t\tobj = self.s3_client.get_object(Bucket=bucket, Key=key)",
			"\t\tbody = obj[\"Body\"]",
			"\t\tcsv_string: str = body.read().decode(\"utf-8\")",
			"\t\treturn pd.read_csv(StringIO(csv_string))"
		]
	},
	"AWS_ECSClient": {
		"scope": "python",
		"prefix": "aws_ecsclient",
		"body": [
			"class AwsEcsClient:",
			"\tdef __init__(",
			"\t\t\tself,",
			"\t\t\tsubnets: list[str],",
			"\t\t\tsecurity_groups: list[str],",
			"\t\t\tlaunch_type: str = \"FARGATE\",",
			"\t\t\tassign_public_ip: str = \"DISABLED\",",
			"\t\t\toverrides: dict[str, Any] = {},",
			"\t\t\tprofile_name: str = \"default\"",
			"\t) -> None:",
			"\t\tself.session: Session = Session(profile_name=profile_name)",
			"\t\tself.ecs_client: ECSClient = self.session.client(\"ecs\")",
			"\t\tself.subnets: list[str] = subnets",
			"\t\tself.security_groups: list[str] = security_groups",
			"\t\tself.launch_type: str = launch_type",
			"\t\tself.assign_public_ip: bool = assign_public_ip",
			"\t\tself.overrides: dict[str, Any] = overrides",
			"",
			"\tdef run_task(self, cluster: str, task_definition: str) -> dict[str, Any]:",
			"\t\ttask: dict[str, Any] = self.ecs_client.run_task(",
			"\t\t\tcluster=cluster,",
			"\t\t\ttaskDefinition=task_definition,",
			"\t\t\tlaunchType=self.launch_type,",
			"\t\t\tnetworkConfiguration={",
			"\t\t\t\t\"awsvpcConfiguration\": {",
			"\t\t\t\t\t\"subnets\": self.subnets,",
			"\t\t\t\t\t\"securityGroups\": self.security_groups,",
			"\t\t\t\t\t\"assignPublicIp\": self.assign_public_ip",
			"\t\t\t\t},",
			"\t\t\t},",
			"\t\t\toverrides=self.overrides",
			"\t\t)",
			"\t\treturn task"
		]
	},
}
